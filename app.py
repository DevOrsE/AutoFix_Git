from flask import Flask, render_template, request, redirect, url_for, session, flash
from models import db, –ê–≤—Ç–æ–º–æ–±–∏–ª–∏, –ù–æ–º–µ—Ä–ó–∞–ø—á–∞—Å—Ç–∏, –í–∏–¥–†–∞–±–æ—Ç, –ó–∞–∫–∞–∑—ã, –í–ª–∞–¥–µ–ª—å—Ü—ã
from datetime import date
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your-super-secret-key'

SQLALCHEMY_DATABASE_URI = (
    'mssql+pyodbc://DevOrsE:DevOrsE#2025@localhost/Database_fixauto?driver=ODBC+Driver+17+for+SQL+Server'
)
# Trusted connection to SQL Server (Windows auth)
app.config['SQLALCHEMY_DATABASE_URI'] = (
    'mssql+pyodbc://DevOrsE:DevOrsE#2025@localhost/Database_fixauto?driver=ODBC+Driver+17+for+SQL+Server'
)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

@app.context_processor
def inject_user():
    user = None
    if "user_id" in session:
        user = –í–ª–∞–¥–µ–ª—å—Ü—ã.query.filter_by(–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞=session["user_id"]).first()
    return dict(current_user=user)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/gallery")
def gallery():
    return render_template("gallery.html")

@app.route("/reviews")
def reviews():
    return render_template("reviews.html")

@app.route("/auth", methods=["GET", "POST"])
def auth():
    if request.method == "POST":
        action = request.form.get("action")
        login = request.form.get("login")
        password = request.form.get("password")

        if action == "login":
            user = –í–ª–∞–¥–µ–ª—å—Ü—ã.query.filter_by(–õ–æ–≥–∏–Ω=login).first()
            if user and check_password_hash(user.–ü–∞—Ä–æ–ª—å, password):
                session["user_id"] = user.–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞
                flash("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", "success")
                return redirect(url_for("account"))
            else:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "danger")

        elif action == "register":
            if –í–ª–∞–¥–µ–ª—å—Ü—ã.query.filter_by(–õ–æ–≥–∏–Ω=login).first():
                flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "danger")
            else:
                try:
                    new_user = –í–ª–∞–¥–µ–ª—å—Ü—ã(
                        –§–∞–º–∏–ª–∏—è=request.form.get("last_name"),
                        –ò–º—è=request.form.get("first_name"),
                        –û—Ç—á–µ—Å—Ç–≤–æ="-",
                        –¢–µ–ª–µ—Ñ–æ–Ω=request.form.get("phone"),
                        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ="-",
                        –õ–æ–≥–∏–Ω=login,
                        –ü–∞—Ä–æ–ª—å=generate_password_hash(password)
                    )
                    db.session.add(new_user)
                    db.session.commit()

                    # üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    session["user_id"] = new_user.–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞
                    flash("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", "success")
                    return redirect(url_for("account"))
                except Exception as e:
                    db.session.rollback()
                    flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}", "danger")

    return render_template("auth.html")


@app.route("/logout")
def logout():
    session.clear()
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", "info")
    return redirect(url_for("index"))

@app.route("/account", methods=["GET", "POST"])
def account():
    if "user_id" not in session:
        flash("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç", "warning")
        return redirect(url_for("auth"))

    user = –í–ª–∞–¥–µ–ª—å—Ü—ã.query.get(session["user_id"])
    cars = –ê–≤—Ç–æ–º–æ–±–∏–ª–∏.query.filter_by(–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞=user.–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞).all()

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–∏ –∏ –∫—É–∑–æ–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
    unique_brands = db.session.query(–ú–æ–¥–µ–ª–∏–ê–≤—Ç–æ.–ú–∞—Ä–∫–∞).distinct().all()
    unique_bodies = db.session.query(–ú–æ–¥–µ–ª–∏–ê–≤—Ç–æ.–ö—É–∑–æ–≤).distinct().all()
    unique_brands = [row[0] for row in unique_brands]
    unique_bodies = [row[0] for row in unique_bodies]

    if request.method == "POST":
        form_type = request.form.get("form_type")

        if form_type == "add":
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ
            new_car = –ê–≤—Ç–æ–º–æ–±–∏–ª–∏(
                –ú–∞—Ä–∫–∞_–∞–≤—Ç–æ–º–æ–±–∏–ª—è=request.form.get("brand"),
                –ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞=user.–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞,
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π_–∑–Ω–∞–∫=request.form.get("plate"),
                –ì–æ–¥_–≤—ã–ø—É—Å–∫–∞=int(request.form.get("year")),
                –ö—É–∑–æ–≤=request.form.get("body"),
                –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ=request.form.get("note") or "-"
            )
            db.session.add(new_car)
            db.session.commit()
            flash("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω", "success")

        elif form_type == "edit":
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ
            car_id = int(request.form.get("car_id"))
            car = –ê–≤—Ç–æ–º–æ–±–∏–ª–∏.query.get_or_404(car_id)

            if car.–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞ != user.–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞:
                flash("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é", "danger")
                return redirect(url_for("account"))

            car.–ú–∞—Ä–∫–∞_–∞–≤—Ç–æ–º–æ–±–∏–ª—è = request.form.get("brand")
            car.–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π_–∑–Ω–∞–∫ = request.form.get("plate")
            car.–ì–æ–¥_–≤—ã–ø—É—Å–∫–∞ = int(request.form.get("year"))
            car.–ö—É–∑–æ–≤ = request.form.get("body")
            car.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ = request.form.get("note")
            db.session.commit()
            flash("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "success")

        return redirect(url_for("account"))

    return render_template(
        "account.html",
        user=user,
        cars=cars,
        unique_brands=unique_brands,
        unique_bodies=unique_bodies
    )

@app.route("/order", methods=["GET", "POST"])
def order():
    if "user_id" not in session:
        flash("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç", "warning")
        return redirect(url_for("auth"))

    cars = –ê–≤—Ç–æ–º–æ–±–∏–ª–∏.query.filter_by(–ö–æ–¥_–≤–ª–∞–¥–µ–ª—å—Ü–∞=session["user_id"]).all()
    parts = –ù–æ–º–µ—Ä–ó–∞–ø—á–∞—Å—Ç–∏.query.all()
    works = –í–∏–¥–†–∞–±–æ—Ç.query.all()
    success = False

    if request.method == "POST":
        new_order = –ó–∞–∫–∞–∑—ã(
            –ö–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è=request.form.get("car_id"),
            –î–∞—Ç–∞_–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è=date.today(),
            –ö–æ–¥_—Ä–∞–±–æ—Ç—ã=request.form.get("repair_id"),
            –ù–æ–º–µ—Ä_–∑–∞–ø—á–∞—Å—Ç–∏=request.form.get("part_id"),
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø—á–∞—Å—Ç–µ–π=int(request.form.get("qty")),
            –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ=request.form.get("note")
        )
        try:
            db.session.add(new_order)
            db.session.commit()
            success = True
        except Exception:
            db.session.rollback()
            flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", "danger")

    return render_template("order.html", cars=cars, parts=parts, works=works, success=success)

if __name__ == "__main__":
    app.run(debug=True)