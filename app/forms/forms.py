from wtforms import PasswordField, IntegerField, SubmitField, TextAreaField, SelectField
from wtforms.validators import EqualTo, Optional
from flask_wtf.recaptcha import RecaptchaField
from wtforms.validators import DataRequired, NumberRange
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, TextAreaField, SubmitField, SelectField
from wtforms.validators import DataRequired, Length
from app.models.models import CarModel

class RegistrationForm(FlaskForm):
    login = StringField("Login", validators=[DataRequired(), Length(min=3, max=50)])
    password = PasswordField("Password", validators=[DataRequired(), Length(min=6)])
    phone = StringField("Phone", validators=[Length(min=5, max=20)])
    confirm_password = PasswordField("Confirm Password", validators=[
        DataRequired(), EqualTo('password', message='Passwords must match')])
    recaptcha = RecaptchaField()  # üëà –¥–æ–±–∞–≤–∏–ª–∏
    submit = SubmitField("Register")

class LoginForm(FlaskForm):
    login = StringField("Login", validators=[DataRequired(), Length(min=3, max=50)])
    password = PasswordField("Password", validators=[DataRequired()])
    recaptcha = RecaptchaField()  # üëà –¥–æ–±–∞–≤–∏–ª–∏
    submit = SubmitField("Log In")

class AdminActionForm(FlaskForm):
    role = SelectField("–†–æ–ª—å", choices=[("user", "User"), ("manager", "Manager"), ("admin", "Admin")], validators=[DataRequired()])
    submit = SubmitField("–ò–∑–º–µ–Ω–∏—Ç—å")

class RegistrationForm(FlaskForm):
    login = StringField("Login", validators=[DataRequired(), Length(min=3, max=50)])
    password = PasswordField("Password", validators=[DataRequired(), Length(min=6)])
    phone = StringField("Phone", validators=[Length(min=5, max=20)])
    confirm_password = PasswordField("Confirm Password", validators=[
    DataRequired(), EqualTo('password', message='Passwords must match')])
    submit = SubmitField("Register")

class LoginForm(FlaskForm):
    login = StringField("Login", validators=[DataRequired(), Length(min=3, max=50)])
    password = PasswordField("Password", validators=[DataRequired()])
    submit = SubmitField("Log In")

class OrderForm(FlaskForm):
    car_id = SelectField("–ú–∞—à–∏–Ω–∞", coerce=int, validators=[DataRequired()])
    service_type_id = SelectField("–¢–∏–ø —É—Å–ª—É–≥–∏", coerce=int, validators=[DataRequired()])
    part_number_id = SelectField("–ù–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", coerce=int, validators=[Optional()])
    description = TextAreaField("–û–ø–∏—Å–∞–Ω–∏–µ", validators=[DataRequired()])
    submit = SubmitField("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")

class CarForm(FlaskForm):
    model_id = SelectField('–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è', coerce=int, validators=[DataRequired()])
    plate = StringField('–ì–æ—Å–Ω–æ–º–µ—Ä', validators=[DataRequired(), Length(max=20)])
    year = IntegerField('–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', validators=[DataRequired()])
    note = TextAreaField('–ó–∞–º–µ—Ç–∫–∞')
    submit = SubmitField('–î–æ–±–∞–≤–∏—Ç—å')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.model_id.choices = [(m.id, m.name) for m in CarModel.query.order_by(CarModel.name).all()]

class DeleteCarForm(FlaskForm):
    pass  # —Ç–æ–ª—å–∫–æ CSRF —Ç–æ–∫–µ–Ω

class EmptyForm(FlaskForm):
    pass